var n=JSON.parse(`{"atoms":{"address":{"Address_01":"<script>\\n  import Address from \\"@dusk-network/address\\";\\n\\n  let address =\\n    \\"0x66D30033B4E0BAF8970e9c8A0aD1D02Cc3e21115fhkllA9urdrTVbAyQZnwy0JLyvbCVZBHpzfBU87Gy4USFWaA6sZ\\";\\n<\/script>\\n\\n<Address variant=\\"brand\\">\\n  <p>{address}</p>\\n</Address>\\n"},"drop-down":{"DropDown_01":"<script>\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n\\n  const options = [\\"option 1\\", \\"option 2\\", \\"option 3\\", \\"option 4\\", \\"option 5\\"];\\n  function onSelect() {\\n    //Triggered on new selected value\\n  }\\n<\/script>\\n\\n<DropDown options=\\"{options}\\" on:select=\\"{onSelect}\\" />\\n","DropDown_02":"<script>\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n\\n  const options = [\\"option 1\\", \\"option 2\\", \\"option 3\\", \\"option 4\\", \\"option 5\\"];\\n  const dropUp = true;\\n  function onSelect() {\\n    //Triggered on new selected value\\n  }\\n<\/script>\\n\\n<DropDown options=\\"{options}\\" dropUp=\\"{dropUp}\\" on:select=\\"{onSelect}\\" />\\n","DropDown_03":"<script>\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n\\n  const options = [];\\n  function onSelect() {\\n    //Triggered on new selected value\\n  }\\n<\/script>\\n\\n<DropDown options=\\"{options}\\" on:select=\\"{onSelect}\\" />\\n"},"icon":{"Icon_01":"<script>\\n  import Icon from \\"@dusk-network/icon\\";\\n\\n  const name = \\"dusk-ticker\\";\\n  const size = \\"xl\\";\\n  const variant = \\"brand\\";\\n<\/script>\\n\\n<Icon name=\\"{name}\\" size=\\"{size}\\" variant=\\"{variant}\\" />\\n","Icon_02":"<script>\\n  import Icon from \\"@dusk-network/icon\\";\\n\\n  const name = \\"dusk-ticker\\";\\n  const size = \\"xl\\";\\n  const variant = \\"brand\\";\\n  const tooltip = \\"Some helpful information on what this icon represents.\\";\\n<\/script>\\n\\n<Icon name=\\"{name}\\" size=\\"{size}\\" variant=\\"{variant}\\" tooltip=\\"{tooltip}\\" />\\n"},"loading-indicator":{"LoadingIndicator_01":"<script>\\n  import LoadingIndicator from \\"@dusk-network/loading-indicator\\";\\n<\/script>\\n\\n<LoadingIndicator />\\n"},"logo":{"Logo_01":"<script>\\n  import Logo from \\"@dusk-network/logo\\";\\n<\/script>\\n\\n<Logo />\\n"},"progress-bar":{"ProgressBar_01":"<script>\\n  import ProgressBar from \\"@dusk-network/progress-bar\\";\\n\\n  const step = 1;\\n  const steps = 3;\\n  const variant = \\"danger\\";\\n<\/script>\\n\\n<ProgressBar step=\\"{step}\\" steps=\\"{steps}\\" variant=\\"{variant}\\" />\\n"},"qr-code":{"QrCode_01":"<script>\\n  import QrCode from \\"@dusk-network/qr-code\\";\\n\\n  let address =\\n    \\"0x66D30033B4E0BAF8970e9c8A0aD1D02Cc3e21115fhkllA9urdrTVbAyQZnwy0JLyvbCVZBHpzfBU87Gy4USFWaA6sZ\\";\\n<\/script>\\n\\n<QrCode value=\\"{address}\\" />\\n"},"rich-text":{"RichText_01":"<script>\\n  import RichText from \\"@dusk-network/rich-text\\";\\n\\n  const size = \\"lg\\";\\n  const strong = \\"**This is a strong text**\\";\\n<\/script>\\n\\n<RichText size=\\"{size}\\" markdown=\\"{strong}\\" />\\n"},"skeleton-loader":{"SkeletonLoader_01":"<script>\\n  import SkeletonLoader from \\"@dusk-network/skeleton-loader\\";\\n<\/script>\\n\\n<SkeletonLoader height=\\"50px\\" width=\\"50%\\" />\\n"},"text-field":{"TextField_01":"<script>\\n  import TextField from \\"@dusk-network/text-field\\";\\n<\/script>\\n\\n<TextField name=\\"simple_text-field\\" placeholder=\\"A simple text field\\" />\\n","TextField_02":"<script>\\n  import TextField from \\"@dusk-network/text-field\\";\\n  const multiline = true;\\n<\/script>\\n\\n<TextField name=\\"simple_text-field\\" placeholder=\\"A simple text field\\" multiline=\\"{multiline}\\" />\\n"},"toggle":{"Toggle_01":"<script>\\n  import Toggle from \\"@dusk-network/toggle\\";\\n\\n  let value = false;\\n  const type = \\"switch\\";\\n  let variant = \\"brand\\";\\n\\n  function onChange() {\\n    //Runs on triggered event\\n  }\\n  function onClick() {\\n    //Runs on triggered event\\n  }\\n<\/script>\\n\\n<Toggle\\n  type=\\"{type}\\"\\n  name=\\"switch\\"\\n  id=\\"switch\\"\\n  variant=\\"{variant}\\"\\n  value=\\"{value}\\"\\n  on:change=\\"{onChange}\\"\\n  on:click=\\"{onClick}\\"\\n/>\\n","Toggle_02":"<script>\\n  import Toggle from \\"@dusk-network/toggle\\";\\n  import Group from \\"@dusk-network/group\\";\\n\\n  const type = \\"button\\";\\n  const variant = \\"brand\\";\\n  function onChange() {\\n    //Runs on triggered event\\n  }\\n  function onClick() {\\n    //Runs on triggered event\\n  }\\n<\/script>\\n\\n<Group>\\n  {#each Array(5) as _, i}\\n    <Toggle\\n      type=\\"{type}\\"\\n      name=\\"button_group\\"\\n      id=\\"button_{i}\\"\\n      variant=\\"{variant}\\"\\n      value=\\"button_{i}\\"\\n      on:change=\\"{onChange}\\"\\n      on:click=\\"{onClick}\\"\\n    >\\n      Example {type}\\n    </Toggle>\\n  {/each}\\n</Group>\\n","Toggle_03":"<script>\\n  import Toggle from \\"@dusk-network/toggle\\";\\n\\n  let value = false;\\n  const type = \\"checkbox\\";\\n  let variant = \\"brand\\";\\n\\n  function onChange() {\\n    //Runs on triggered event\\n  }\\n  function onClick() {\\n    //Runs on triggered event\\n  }\\n<\/script>\\n\\n<Toggle\\n  type=\\"{type}\\"\\n  name=\\"checkbox\\"\\n  id=\\"checkbox\\"\\n  variant=\\"{variant}\\"\\n  value=\\"{value}\\"\\n  on:change=\\"{onChange}\\"\\n  on:click=\\"{onClick}\\"\\n>\\n  Example {type}\\n</Toggle>\\n","Toggle_04":"<script>\\n  import Toggle from \\"@dusk-network/toggle\\";\\n  import Group from \\"@dusk-network/group\\";\\n\\n  const type = \\"radio\\";\\n  const variant = \\"brand\\";\\n  function onChange() {\\n    //Runs on triggered event\\n  }\\n  function onClick() {\\n    //Runs on triggered event\\n  }\\n<\/script>\\n\\n<Group>\\n  {#each Array(5) as _, i}\\n    <Toggle\\n      type=\\"{type}\\"\\n      name=\\"radio_group\\"\\n      id=\\"radio_{i}\\"\\n      variant=\\"{variant}\\"\\n      value=\\"radio_{i}\\"\\n      on:change=\\"{onChange}\\"\\n      on:click=\\"{onClick}\\"\\n    >\\n      Example {type}\\n    </Toggle>\\n  {/each}\\n</Group>\\n"},"truncate-text":{"TruncateText_01":"<script>\\n  import TruncateText from \\"@dusk-network/truncate-text\\";\\n\\n  let text = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\";\\n<\/script>\\n\\n<TruncateText width=\\"half\\" text=\\"{text}\\" />\\n"}},"helpers":{"contexts":{"Contexts_01":"<script>\\n  import { contexts } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>Button</code> contexts:</p>\\n<ul>\\n  {#each Object.entries(contexts.BUTTON) as context}\\n    <li>{context[0]}</li>\\n  {/each}\\n</ul>\\n<p>\\n  Access a contexts directly. <code>contexts.BUTTON.HEADING</code> is \\"{contexts.BUTTON.HEADING}\\"\\n</p>\\n"},"icons":{"Icons_01":"<script>\\n  import { icons } from \\"@dusk-network/helpers\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<p>A list of available icons:</p>\\n\\n<ul>\\n  {#each Object.entries(icons) as icon}\\n    <li>{icon[0]}</li>\\n  {/each}\\n</ul>\\n\\n<p>Use an icon:</p>\\n\\n<Icon name=\\"{icons.DUSK_TICKER}\\" />\\n"},"orientations":{"Orientations_01":"<script>\\n  import { orientations } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>Menu</code> orientations:</p>\\n\\n<ul>\\n  {#each Object.entries(orientations.MENU) as orientation}\\n    <li>{orientation[0]}</li>\\n  {/each}\\n</ul>\\n"},"sizes":{"Sizes_01":"<script>\\n  import { sizes } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>Button</code> sizes:</p>\\n\\n<ul>\\n  {#each Object.entries(sizes.BUTTON) as size}\\n    <li>{size[0]}</li>\\n  {/each}\\n</ul>\\n"},"states":{"States_01":"<script>\\n  import { states } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>TextField</code> states:</p>\\n\\n<ul>\\n  {#each Object.entries(states.TEXT_FIELD) as state}\\n    <li>{state[0]}</li>\\n  {/each}\\n</ul>\\n"},"types":{"Types_01":"<script>\\n  import { types } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>TextField</code> types:</p>\\n\\n<ul>\\n  {#each Object.entries(types.TEXT_FIELD) as type}\\n    <li>{type[0]}</li>\\n  {/each}\\n</ul>\\n"},"variants":{"Variants_01":"<script>\\n  import { variants } from \\"@dusk-network/helpers\\";\\n  import Button from \\"@dusk-network/button\\";\\n<\/script>\\n\\n<p>A list of available Button variants:</p>\\n\\n<ul>\\n  {#each Object.entries(variants.BUTTON) as variant}\\n    <li>{variant[0]}</li>\\n  {/each}\\n</ul>\\n\\n<p>Access a variant directly. <code>variants.BUTTON.BRAND</code> is \\"{variants.BUTTON.BRAND}\\"</p>\\n<p>Use a variant in a component:</p>\\n\\n<Button variant=\\"{variants.BUTTON.BRAND}\\">I am a brand variant</Button>\\n"},"widths":{"Widths_01":"<script>\\n  import { widths } from \\"@dusk-network/helpers\\";\\n<\/script>\\n\\n<p>A list of available <code>Control</code> widths:</p>\\n\\n<ul>\\n  {#each Object.entries(widths.CONTROL) as width}\\n    <li>{width[0]}</li>\\n  {/each}\\n</ul>\\n"}},"molecules":{"alert":{"Alert_01":"<script>\\n  import Alert from \\"@dusk-network/alert\\";\\n  import Icon from \\"@dusk-network/icon/Icon.svelte\\";\\n  import Button from \\"@dusk-network/button/Button.svelte\\";\\n  import Group from \\"@dusk-network/group/Group.svelte\\";\\n\\n  function onClick() {}\\n  function onMouseover() {}\\n\\n  let variant = \\"success\\";\\n  let value = true;\\n<\/script>\\n\\n<Alert value=\\"{value}\\" variant=\\"{variant}\\" on:click=\\"{onClick}\\" on:mouseover=\\"{onMouseover}\\">\\n  <div slot=\\"icon\\">\\n    <Icon name=\\"check-decagram-outline\\" />\\n  </div>\\n  <div slot=\\"title\\">Alert Title!</div>\\n  <p>This is an alert!</p>\\n  <div slot=\\"actions\\">\\n    <Group>\\n      <Button variant=\\"{variant || 'brand'}\\" outline=\\"{true}\\" on:click=\\"{() => (value = false)}\\">\\n        Accept\\n      </Button>\\n      <Button variant=\\"default\\" outline=\\"{true}\\" on:click=\\"{() => (value = false)}\\">Reject</Button>\\n    </Group>\\n  </div>\\n</Alert>\\n","Alert_02":"<script>\\n  import Alert from \\"@dusk-network/alert\\";\\n  import Icon from \\"@dusk-network/icon/Icon.svelte\\";\\n  import Button from \\"@dusk-network/button/Button.svelte\\";\\n  import Group from \\"@dusk-network/group/Group.svelte\\";\\n\\n  function onClick() {}\\n  function onMouseover() {}\\n\\n  let variant = \\"success\\";\\n  let value = true;\\n<\/script>\\n\\n<Alert\\n  value=\\"{value}\\"\\n  variant=\\"{variant} \\"\\n  dismissable=\\"{true}\\"\\n  on:click=\\"{onClick}\\"\\n  on:mouseover=\\"{onMouseover}\\"\\n>\\n  <div slot=\\"icon\\">\\n    <Icon name=\\"check-decagram-outline\\" />\\n  </div>\\n  <div slot=\\"title\\">Alert Title!</div>\\n  <p>This is an alert!</p>\\n  <div slot=\\"actions\\">\\n    <Group>\\n      <Button variant=\\"{variant || 'brand'}\\" outline=\\"{true}\\" on:click=\\"{() => (value = false)}\\">\\n        Accept\\n      </Button>\\n      <Button variant=\\"default\\" outline=\\"{true}\\" on:click=\\"{() => (value = false)}\\">Reject</Button>\\n    </Group>\\n  </div>\\n</Alert>\\n"},"breadcrumb":{"Breadcrumb_01":"<script>\\n  import Breadcrumb, { Item } from \\"@dusk-network/breadcrumb\\";\\n\\n  function onExit() {}\\n<\/script>\\n\\n<Breadcrumb href=\\"javascript:;\\" on:exit=\\"{onExit}\\">\\n  <Item>\\n    <strong>Transaction details:</strong>\\n    <div>5ea9b166c197ccccf2egsdsrr5775kwoa3485</div>\\n  </Item>\\n</Breadcrumb>\\n"},"button":{"Button_01":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n<\/script>\\n\\n<Button>Hi there</Button>\\n","Button_02":"<script>\\n  import Button, { Label } from \\"@dusk-network/button\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<Button variant=\\"cta\\">\\n  <Icon name=\\"check-decagram-outline\\" size=\\"sm\\" />\\n  <Label>Hi there</Label>\\n</Button>\\n","Button_03":"<script>\\n  import Button, { Label } from \\"@dusk-network/button\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<Button variant=\\"success\\">\\n  <Label>Hi there</Label>\\n  <Icon name=\\"check-decagram-outline\\" size=\\"sm\\" />\\n</Button>\\n","Button_04":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n<\/script>\\n\\n<Button variant=\\"warning\\" block=\\"{true}\\">Hi there</Button>\\n","Button_05":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n  const default_slot = \\"Button\\";\\n  const labelRight = \\"I am a label\\";\\n<\/script>\\n\\n<Button variant=\\"danger\\">\\n  {default_slot}\\n  <svelte:fragment slot=\\"labelRight\\">\\n    {labelRight}\\n  </svelte:fragment>\\n</Button>\\n","Button_06":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n  const default_slot = \\"Button\\";\\n  const labelLeft = \\"I am a label\\";\\n<\/script>\\n\\n<Button>\\n  {default_slot}\\n  <svelte:fragment slot=\\"labelLeft\\">\\n    {labelLeft}\\n  </svelte:fragment>\\n</Button>\\n","Button_07":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n  import Group from \\"@dusk-network/group\\";\\n<\/script>\\n\\n<Group>\\n  <Button>Button</Button>\\n  <Button>Button</Button>\\n  <Button>Button</Button>\\n</Group>\\n"},"content":{"Content_01":"<script>\\n  import Content from \\"@dusk-network/content\\";\\n<\/script>\\n\\n<Content>\\n  <h1>Hello World</h1>\\n  <p>This is a paragraph</p>\\n</Content>\\n"},"control":{"Control_01":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import TextField from \\"@dusk-network/text-field\\";\\n<\/script>\\n\\n<Control width=\\"full\\" label=\\"Control label\\" let:id>\\n  <TextField name=\\"control_test\\" placeholder=\\"A controlled text field\\" id=\\"{id}\\" />\\n</Control>\\n","Control_02":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import Toggle from \\"@dusk-network/toggle\\";\\n\\n  let state = \\"warning\\";\\n<\/script>\\n\\n<Control width=\\"full\\" label=\\"Control label\\" let:id>\\n  <Toggle id=\\"{id}\\" type=\\"checkbox\\" state=\\"{state}\\">Checkbox example</Toggle>\\n</Control>\\n","Control_03":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import Toggle from \\"@dusk-network/toggle\\";\\n\\n  let state = \\"warning\\";\\n<\/script>\\n\\n<Control width=\\"full\\" label=\\"Control label\\" let:id>\\n  <Toggle id=\\"{id}\\" type=\\"radio\\" state=\\"{state}\\">Radio example</Toggle>\\n</Control>\\n","Control_04":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n\\n  function onClick() {}\\n  function onMouseover() {}\\n<\/script>\\n\\n<Control width=\\"full\\" dropDown=\\"{true}\\" on:click=\\"{onClick}\\" on:mouseover=\\"{onMouseover}\\" let:id>\\n  <DropDown id=\\"{id}\\" options=\\"{[1, 2, 3, 4]}\\" />\\n</Control>\\n","Control_05":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import TextField from \\"@dusk-network/text-field\\";\\n  import Button from \\"@dusk-network/button\\";\\n\\n  function onClick() {}\\n  function onMouseover() {}\\n  let state = \\"warning\\";\\n<\/script>\\n\\n<Control\\n  width=\\"full\\"\\n  buttonPrefix=\\"{true}\\"\\n  on:click=\\"{onClick}\\"\\n  on:mouseover=\\"{onMouseover}\\"\\n  let:id\\n>\\n  <Button slot=\\"buttonPrefix\\">Prefixed</Button>\\n  <TextField id=\\"{id}\\" state=\\"{state}\\" />\\n</Control>\\n","Control_06":"<script>\\n  import Control from \\"@dusk-network/control\\";\\n  import TextField from \\"@dusk-network/text-field\\";\\n  import Button from \\"@dusk-network/button\\";\\n\\n  function onClick() {}\\n  function onMouseover() {}\\n  let state = \\"warning\\";\\n<\/script>\\n\\n<Control\\n  width=\\"full\\"\\n  buttonPostfix=\\"{true}\\"\\n  on:click=\\"{onClick}\\"\\n  on:mouseover=\\"{onMouseover}\\"\\n  let:id\\n>\\n  <Button slot=\\"buttonPostfix\\">Postfixed</Button>\\n  <TextField id=\\"{id}\\" state=\\"{state}\\" />\\n</Control>\\n"},"cta-list":{"CtaList_01":"<script>\\n  import CtaList, { Item } from \\"@dusk-network/cta-list\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n\\n  const type = 2;\\n<\/script>\\n\\n<CtaList type=\\"{type}\\">\\n  <Item>\\n    <RichText>First</RichText>\\n  </Item>\\n  <Item>\\n    <RichText>Second</RichText>\\n  </Item>\\n</CtaList>\\n"},"detail-list":{"DetailList_01":"<script>\\n  import DetailList, { Item } from \\"@dusk-network/detail-list\\";\\n<\/script>\\n\\n<DetailList>\\n  <Item>\\n    <svelte:fragment slot=\\"term\\">Something</svelte:fragment>\\n    <svelte:fragment slot=\\"definition\\">Defined</svelte:fragment>\\n  </Item>\\n  <Item>\\n    <svelte:fragment slot=\\"term\\">Something else</svelte:fragment>\\n    <svelte:fragment slot=\\"definition\\">Defined too</svelte:fragment>\\n  </Item>\\n</DetailList>\\n","DetailList_02":"<script>\\n  import DetailList, { Item } from \\"@dusk-network/detail-list\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<DetailList>\\n  <Item>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"check-circle-outline\\" />\\n    </svelte:fragment>\\n    <span slot=\\"term\\"> Something </span>\\n    <svelte:fragment slot=\\"definition\\">Defined</svelte:fragment>\\n  </Item>\\n  <Item>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"check-circle-outline\\" />\\n    </svelte:fragment>\\n    <span slot=\\"term\\"> Something else </span>\\n    <svelte:fragment slot=\\"definition\\">Defined too</svelte:fragment>\\n  </Item>\\n</DetailList>\\n"},"disclaimer-list":{"DisclaimerList_01":"<script>\\n  import DisclaimerList, { Item } from \\"@dusk-network/disclaimer-list\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n  import Heading from \\"@dusk-network/heading\\";\\n<\/script>\\n\\n<DisclaimerList>\\n  <svelte:fragment slot=\\"heading\\">\\n    <Heading variant=\\"danger\\">\\n      <svelte:fragment slot=\\"icon\\">\\n        <Icon name=\\"alert-outline\\" />\\n      </svelte:fragment>\\n      <h1>Warning</h1>\\n    </Heading>\\n  </svelte:fragment>\\n  <Item>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"safe\\" size=\\"xxxl\\" variant=\\"danger\\" />\\n    </svelte:fragment>\\n    <RichText size=\\"sm\\">\\n      <h2>Don't Lose It</h2>\\n      <p>If you lose your keystore file, your wallet will be lost.</p>\\n    </RichText>\\n  </Item>\\n  <Item>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"eye-outline\\" size=\\"xxxl\\" variant=\\"danger\\" />\\n    </svelte:fragment>\\n    <RichText size=\\"sm\\">\\n      <h2>Don't Share It</h2>\\n      <p>\\n        Anyone with your keystore file can access your funds.<br /> Beware of malicious phishing sites.\\n      </p>\\n    </RichText>\\n  </Item>\\n  <Item>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"content-save-alert-outline\\" size=\\"xxxl\\" variant=\\"danger\\" />\\n    </svelte:fragment>\\n    <RichText size=\\"sm\\">\\n      <h2>Store It Securely</h2>\\n      <p>Secure it like the milions of dollars it may one day be worth</p>\\n    </RichText>\\n  </Item>\\n</DisclaimerList>\\n"},"file-upload":{"FileUpload_01":"<script>\\n  import FileUpload from \\"@dusk-network/file-upload\\";\\n  import Form from \\"@dusk-network/form\\";\\n  import Control from \\"@dusk-network/control\\";\\n  import Button from \\"@dusk-network/button\\";\\n  import * as yup from \\"yup\\";\\n\\n  let schema = yup.object().shape({\\n    file: yup\\n      .mixed()\\n      .label(\\"Upload file\\")\\n      .required(\\"A file is required\\")\\n      .test(\\"fileSize\\", \\"File too large\\", (value) => value && value[0].size <= 1000000)\\n      .test(\\n        \\"fileFormat\\",\\n        \\"Unsupported file format\\",\\n        (value) => value && [\\"image/png\\", \\"image/jpeg\\"].includes(value[0].type),\\n      ),\\n  });\\n\\n  // let schema = {\\n  //   file: null,\\n  // };\\n\\n  let fields = {\\n    file: null,\\n  };\\n\\n  let uploaded = false;\\n  let submitted = false;\\n  function formSubmit() {\\n    submitted = true;\\n    if (schema.isValidSync({ file: fields.file })) {\\n      uploaded = true;\\n      submitted = false;\\n      alert(\\"submit form\\");\\n    } else {\\n      uploaded = false;\\n    }\\n  }\\n<\/script>\\n\\n<Form submitted=\\"{submitted}\\" schema=\\"{schema}\\" fields=\\"{fields}\\" submitHandler=\\"{formSubmit}\\">\\n  <Control name=\\"file\\" let:id let:state>\\n    <FileUpload\\n      id=\\"{id}\\"\\n      state=\\"{state}\\"\\n      uploaded=\\"{uploaded}\\"\\n      on:inputFile=\\"{(event) => (fields.file = event.detail.file)}\\"\\n    />\\n  </Control>\\n  <Control>\\n    <Button type=\\"submit\\" size=\\"lg\\" variant=\\"cta\\">Upload</Button>\\n  </Control>\\n</Form>\\n"},"heading":{"Heading_01":"<script>\\n  import Heading from \\"@dusk-network/heading\\";\\n  import Button from \\"@dusk-network/button\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n\\n  const icon = \\"dusk-ticker\\";\\n  const heading = \\"<h1>This is a heading</h1>\\";\\n  const button = \\"Confirm\\";\\n<\/script>\\n\\n<Heading>\\n  <svelte:fragment slot=\\"icon\\">\\n    {#if icon}\\n      <Icon name=\\"{icon}\\" />\\n    {/if}\\n  </svelte:fragment>\\n  {@html heading}\\n  <svelte:fragment slot=\\"button\\">\\n    {#if button}\\n      <Button>{button}</Button>\\n    {/if}\\n  </svelte:fragment>\\n</Heading>\\n","Heading_02":"<script>\\n  import Heading from \\"@dusk-network/heading\\";\\n\\n  const heading = \\"<h1>This is a heading</h1>\\";\\n<\/script>\\n\\n<Heading>\\n  {@html heading}\\n</Heading>\\n","Heading_03":"<script>\\n  import Heading from \\"@dusk-network/heading\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n\\n  const icon = \\"dusk-ticker\\";\\n  const heading = \\"<h1>This is a heading</h1>\\";\\n<\/script>\\n\\n<Heading>\\n  <svelte:fragment slot=\\"icon\\">\\n    {#if icon}\\n      <Icon name=\\"{icon}\\" />\\n    {/if}\\n  </svelte:fragment>\\n  {@html heading}\\n</Heading>\\n"},"menu":{"Menu_01":"<script>\\n  import Menu, { Item } from \\"@dusk-network/menu\\";\\n\\n  const orientation = \\"horizontal\\";\\n<\/script>\\n\\n<Menu orientation=\\"{orientation}\\">\\n  <Item href=\\"javascript:;\\">Link 1</Item>\\n  <Item href=\\"javascript:;\\">Link 2</Item>\\n  <Item>No Link</Item>\\n</Menu>\\n","Menu_02":"<script>\\n  import Menu, { Item } from \\"@dusk-network/menu\\";\\n\\n  const orientation = \\"vertical\\";\\n<\/script>\\n\\n<Menu orientation=\\"{orientation}\\">\\n  <Item href=\\"javascript:;\\">Link 1</Item>\\n  <Item href=\\"javascript:;\\">Link 2</Item>\\n  <Item>No Link</Item>\\n</Menu>\\n"},"mnemonic":{"Mnemonic_01":"<script>\\n  import Mnemonic from \\"@dusk-network/mnemonic\\";\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n  import types from \\"@dusk-network/helpers/types.js\\";\\n\\n  function onComplete() {}\\n  function onPassed() {}\\n  const seed = [\\n    \\"oyster\\",\\n    \\"close\\",\\n    \\"apple\\",\\n    \\"unfold\\",\\n    \\"wood\\",\\n    \\"alone\\",\\n    \\"during\\",\\n    \\"storm\\",\\n    \\"pulp\\",\\n    \\"glow\\",\\n    \\"album\\",\\n    \\"shop\\",\\n  ];\\n  let type = types.MNEMONIC.PREVIEW;\\n  const length = 12;\\n  //Drop-down prop and event are used just to display different Mnemnonic types\\n  const options = [types.MNEMONIC.PREVIEW, types.MNEMONIC.AUTHENTICATE, types.MNEMONIC.CONFIRM];\\n  function onSelect(event) {\\n    type = event.detail;\\n  }\\n<\/script>\\n\\n<p>Mnemonic type:</p>\\n<DropDown options=\\"{options}\\" on:select=\\"{onSelect}\\" />\\n<br />\\n<Mnemonic\\n  on:complete=\\"{onComplete}\\"\\n  on:passed=\\"{onPassed}\\"\\n  seed=\\"{seed}\\"\\n  type=\\"{type}\\"\\n  length=\\"{length}\\"\\n/>\\n"},"pagination":{"Pagination_01":"<script>\\n  import Pagination from \\"@dusk-network/pagination\\";\\n  import { data } from \\"./data.js\\";\\n  import { writable } from \\"svelte/store\\";\\n\\n  const pageNumber = writable(1);\\n  const items = data;\\n  const itemsPerPage = 10;\\n<\/script>\\n\\n<Pagination pageNumber=\\"{pageNumber}\\" items=\\"{items}\\" itemsPerPage=\\"{itemsPerPage}\\" />\\n"},"password-strength":{"PasswordStrength_01":"<script>\\n  //import PasswordStrength from \\"@dusk-network/password-strength\\";\\n\\n  //let password = \\"\\";\\n<\/script>\\n\\n<!-- <PasswordStrength password=\\"{password}\\" /> -->\\n"},"statistic":{"Statistic_01":"<script>\\n  import Statistic from \\"@dusk-network/statistic\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<Statistic>\\n  <svelte:fragment slot=\\"icon\\">\\n    <Icon name=\\"chart-areaspline\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n  </svelte:fragment>\\n  <p>$108.048.497</p>\\n</Statistic>\\n","Statistic_02":"<script>\\n  import Statistic from \\"@dusk-network/statistic\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n  import Group from \\"@dusk-network/group\\";\\n<\/script>\\n\\n<Group grid=\\"{true}\\">\\n  <Statistic title=\\"DUSK Price\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"dusk-ticker\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>$0,2947 (<span class=\\"text-green-500\\">+1.76%</span>)</p>\\n  </Statistic>\\n  <Statistic title=\\"Estimated Total Staked\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"database\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>100.000.000 DUSK</p>\\n  </Statistic>\\n  <Statistic title=\\"Market Cap\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"chart-areaspline\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>$108.048.497</p>\\n  </Statistic>\\n  <Statistic title=\\"Transactions\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"pound-box-outline\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>150786</p>\\n  </Statistic>\\n  <Statistic title=\\"Average Gas Price\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"gauge\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>1.54 DUSK</p>\\n  </Statistic>\\n  <Statistic title=\\"Provisioners\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"contacts\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <p>88,880</p>\\n  </Statistic>\\n</Group>\\n","Statistic_03":"<script>\\n  import Statistic from \\"@dusk-network/statistic\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n  import Group from \\"@dusk-network/group\\";\\n  import Chip from \\"@dusk-network/chip\\";\\n<\/script>\\n\\n<Group grid=\\"{true}\\">\\n  <Statistic title=\\"DUSK Price\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"dusk-ticker\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n  <Statistic title=\\"Estimated Total Staked\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"database\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n  <Statistic title=\\"Market Cap\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"chart-areaspline\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n  <Statistic title=\\"Transactions\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"pound-box-outline\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n  <Statistic title=\\"Average Gas Price\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"gauge\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n  <Statistic title=\\"Provisioners\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"contacts\\" variant=\\"brand\\" size=\\"xxxl\\" />\\n    </svelte:fragment>\\n    <Chip variant=\\"danger\\">No data</Chip>\\n  </Statistic>\\n</Group>\\n"}},"organisms":{"accordion":{"Accordion_01":"<script>\\n  import Accordion, { Item } from \\"@dusk-network/accordion\\";\\n<\/script>\\n\\n<Accordion>\\n  <Item title=\\"First Item\\">First item content...</Item>\\n  <Item title=\\"Second Item\\">Second item content...</Item>\\n  <Item title=\\"Third Item\\">Third item content...</Item>\\n  <Item title=\\"Fourth Item\\">Fourth item content...</Item>\\n</Accordion>\\n","Accordion_02":"<script>\\n  import Accordion, { Item } from \\"@dusk-network/accordion\\";\\n  import Card from \\"@dusk-network/card\\";\\n  import Content from \\"@dusk-network/content\\";\\n<\/script>\\n\\n<Card>\\n  <Content>\\n    <Accordion>\\n      <Item title=\\"First Item\\">First item content...</Item>\\n      <Item title=\\"Second Item\\">Second item content...</Item>\\n      <Item title=\\"Third Item\\">Third item content...</Item>\\n      <Item title=\\"Fourth Item\\">Fourth item content...</Item>\\n    </Accordion>\\n  </Content>\\n</Card>\\n"},"card":{"Card_01":"<script>\\n  import Card from \\"@dusk-network/card\\";\\n  import Content from \\"@dusk-network/content\\";\\n<\/script>\\n\\n<Card>\\n  <Content>Hi there</Content>\\n</Card>\\n","Card_02":"<script>\\n  import Card from \\"@dusk-network/card\\";\\n  import Heading from \\"@dusk-network/heading\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n<\/script>\\n\\n<Card>\\n  <Heading>\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"wallet-plus\\" />\\n    </svelte:fragment>\\n    <h2>Primary Heading!</h2>\\n  </Heading>\\n  <Heading variant=\\"danger\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"alert-outline\\" />\\n    </svelte:fragment>\\n    <h2>Error heading!</h2>\\n  </Heading>\\n  <Heading variant=\\"warning\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"alert-outline\\" />\\n    </svelte:fragment>\\n    <h2>Warning heading!</h2>\\n  </Heading>\\n  <Heading variant=\\"success\\">\\n    <svelte:fragment slot=\\"icon\\">\\n      <Icon name=\\"alert-outline\\" />\\n    </svelte:fragment>\\n    <h2>Success heading!</h2>\\n  </Heading>\\n</Card>\\n","Card_03":"<script>\\n  import Card from \\"@dusk-network/card\\";\\n  import Content from \\"@dusk-network/content\\";\\n  import Heading from \\"@dusk-network/heading\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n<\/script>\\n\\n<Card>\\n  <Heading size=\\"sm\\">\\n    <h2>Card Heading</h2>\\n  </Heading>\\n  <Content>\\n    <RichText>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec consectetur, nisl eget\\n        consectetur tempor, nisl nunc consectetur purus, eget tincidunt nisl nunc euismod nisl.\\n      </p>\\n    </RichText>\\n  </Content>\\n</Card>\\n"},"cookie-banner":{"CookieBanner_01":"<script>\\n  import CookieBanner from \\"@dusk-network/cookie-banner\\";\\n  import Button from \\"@dusk-network/button\\";\\n  import Control from \\"@dusk-network/control\\";\\n\\n  let showBanner;\\n<\/script>\\n\\n<Control>\\n  <Button on:click=\\"{() => (showBanner = !showBanner)}\\">Toggle Cookie Banner</Button>\\n</Control>\\n<CookieBanner acceptLabel=\\"Accept\\" settingsLabel=\\"Settings\\" showBanner=\\"{showBanner}\\">\\n  <p>\\n    We and selected partners and related companies, use cookies and similar technologies as\\n    specified in our Cookies Policy. You agree to consent to the use of these technologies by\\n    clicking Accept, or by continuing to browse this website. You can learn more about how we use\\n    cookies and set cookie preferences in Settings.\\n  </p>\\n</CookieBanner>\\n"},"footer":{"Footer_01":"<script>\\n  import Footer from \\"@dusk-network/footer\\";\\n\\n  const type = \\"minimal\\";\\n\\n  const social = [\\n    {\\n      title: \\"CoinMarketCap\\",\\n      icon: \\"coin-market-cap\\",\\n      url: \\"https://coinmarketcap.com/currencies/dusk-network/\\",\\n    },\\n    {\\n      title: \\"YouTube\\",\\n      icon: \\"youtube\\",\\n      url: \\"https://www.youtube.com/c/DuskNetwork\\",\\n    },\\n    {\\n      title: \\"Twitter\\",\\n      icon: \\"twitter\\",\\n      url: \\"https://twitter.com/duskfoundation\\",\\n    },\\n    {\\n      title: \\"LinkedIn\\",\\n      icon: \\"linked-in\\",\\n      url: \\"https://www.linkedin.com/company/dusknetwork/\\",\\n    },\\n    {\\n      title: \\"Telegram\\",\\n      icon: \\"telegram\\",\\n      url: \\"https://t.me/DuskNetwork\\",\\n    },\\n    {\\n      title: \\"Github\\",\\n      icon: \\"github\\",\\n      url: \\"https://github.com/dusk-network\\",\\n    },\\n  ];\\n<\/script>\\n\\n<Footer type=\\"{type}\\" social=\\"{social}\\" />\\n","Footer_02":"<script>\\n  import Footer from \\"@dusk-network/footer\\";\\n\\n  const type = \\"maximal\\";\\n\\n  const social = [\\n    {\\n      title: \\"CoinMarketCap\\",\\n      icon: \\"coin-market-cap\\",\\n      url: \\"https://coinmarketcap.com/currencies/dusk-network/\\",\\n    },\\n    {\\n      title: \\"YouTube\\",\\n      icon: \\"youtube\\",\\n      url: \\"https://www.youtube.com/c/DuskNetwork\\",\\n    },\\n    {\\n      title: \\"Twitter\\",\\n      icon: \\"twitter\\",\\n      url: \\"https://twitter.com/duskfoundation\\",\\n    },\\n    {\\n      title: \\"LinkedIn\\",\\n      icon: \\"linked-in\\",\\n      url: \\"https://www.linkedin.com/company/dusknetwork/\\",\\n    },\\n    {\\n      title: \\"Telegram\\",\\n      icon: \\"telegram\\",\\n      url: \\"https://t.me/DuskNetwork\\",\\n    },\\n    {\\n      title: \\"Github\\",\\n      icon: \\"github\\",\\n      url: \\"https://github.com/dusk-network\\",\\n    },\\n  ];\\n  const categories = [\\n    {\\n      title: \\"Blockchain\\",\\n      links: [\\n        {\\n          title: \\"Technology Explained\\",\\n          url: \\"https://dusk.network/pages/network\\",\\n        },\\n        {\\n          title: \\"Roadmap\\",\\n          url: \\"https://dusk.network/pages/roadmap\\",\\n        },\\n        {\\n          title: \\"Use Cases\\",\\n          url: \\"https://dusk.network/pages/roadmap\\",\\n        },\\n        {\\n          title: \\"Staking\\",\\n          url: \\"https://staking.dusk.network\\",\\n        },\\n      ],\\n    },\\n    {\\n      title: \\"Developers\\",\\n      links: [\\n        {\\n          title: \\"Whitepaper\\",\\n          url: \\"https://dusk.network/uploads/dusk-whitepaperv2.pdf\\",\\n        },\\n        {\\n          title: \\"Github\\",\\n          url: \\"https://github.com/dusk-network\\",\\n        },\\n        {\\n          title: \\"Resources\\",\\n          url: \\"https://dusk.network/pages/resources\\",\\n        },\\n        {\\n          title: \\"PLONK Proving System\\",\\n          url: \\"https://crates.io/crates/dusk-plonk\\",\\n        },\\n      ],\\n    },\\n    {\\n      title: \\"Media\\",\\n      links: [\\n        {\\n          title: \\"Blog\\",\\n          url: \\"https://dusk.network/pages/all-posts\\",\\n        },\\n        {\\n          title: \\"News Room\\",\\n          url: \\"https://dusknetwork.pr.co/\\",\\n        },\\n        {\\n          title: \\"Press Contact\\",\\n          url: \\"mailto:press@dusk.network\\",\\n        },\\n      ],\\n    },\\n    {\\n      title: \\"Company\\",\\n      links: [\\n        {\\n          title: \\"Team\\",\\n          url: \\"https://dusk.network/pages/team\\",\\n        },\\n        {\\n          title: \\"Careers\\",\\n          url: \\"https://dusk.network/pages/jobs\\",\\n        },\\n        {\\n          title: \\"FAQ\\",\\n          url: \\"https://dusk.network/pages/faq\\",\\n        },\\n      ],\\n    },\\n  ];\\n<\/script>\\n\\n<Footer type=\\"{type}\\" social=\\"{social}\\" categories=\\"{categories}\\" />\\n"},"form":{"Form_01":"<script>\\n  import Button from \\"@dusk-network/button\\";\\n  import Control from \\"@dusk-network/control\\";\\n  import TextField from \\"@dusk-network/text-field\\";\\n  import Toggle from \\"@dusk-network/toggle\\";\\n  import Group from \\"@dusk-network/group\\";\\n  import FileUpload from \\"@dusk-network/file-upload\\";\\n  import Form from \\"@dusk-network/form\\";\\n\\n  let schema = {\\n    first_name: \\"\\",\\n    last_name: \\"\\",\\n    email: \\"\\",\\n    password: \\"\\",\\n    password_confirmation: \\"\\",\\n    services_option: \\"\\",\\n    marketing_email: false,\\n    terms: false,\\n    file: null,\\n  };\\n\\n  let fields = {\\n    first_name: \\"\\",\\n    last_name: \\"\\",\\n    email: \\"\\",\\n    password: \\"\\",\\n    password_confirmation: \\"\\",\\n    services_option: \\"\\",\\n    marketing_email: false,\\n    terms: false,\\n    file: null,\\n  };\\n\\n  let submitted = false;\\n  let uploaded = false;\\n\\n  function formSubmit() {\\n    submitted = true;\\n    if (schema.isValidSync(fields)) {\\n      uploaded = true;\\n      submitted = false;\\n      alert(\\"submit form\\");\\n    } else {\\n      uploaded = false;\\n    }\\n  }\\n<\/script>\\n\\n<Form\\n  class=\\"sb-example\\"\\n  submitted=\\"{submitted}\\"\\n  schema=\\"{schema}\\"\\n  fields=\\"{fields}\\"\\n  submitHandler=\\"{formSubmit}\\"\\n>\\n  <Control width=\\"half\\" label=\\"First name\\" name=\\"first_name\\" let:id let:state>\\n    <TextField\\n      type=\\"text\\"\\n      placeholder=\\"Elon\\"\\n      id=\\"{id}\\"\\n      state=\\"{state}\\"\\n      bind:value=\\"{fields.first_name}\\"\\n    />\\n  </Control>\\n  <Control width=\\"half\\" label=\\"Last name\\" name=\\"last_name\\" let:id let:state>\\n    <TextField\\n      type=\\"text\\"\\n      placeholder=\\"Dusk\\"\\n      id=\\"{id}\\"\\n      state=\\"{state}\\"\\n      bind:value=\\"{fields.last_name}\\"\\n    />\\n  </Control>\\n  <Control width=\\"full\\" label=\\"Email\\" name=\\"email\\" let:id let:state>\\n    <TextField type=\\"email\\" id=\\"{id}\\" state=\\"{state}\\" bind:value=\\"{fields.email}\\" />\\n  </Control>\\n  <Control width=\\"half\\" label=\\"Password\\" name=\\"password\\" let:id let:state>\\n    <TextField type=\\"password\\" state=\\"{state}\\" bind:value=\\"{fields.password}\\" id=\\"{id}\\" />\\n  </Control>\\n  <Control width=\\"half\\" label=\\"Confirm password\\" name=\\"password_confirmation\\" let:id let:state>\\n    <TextField\\n      type=\\"password\\"\\n      state=\\"{state}\\"\\n      name=\\"password_confirmation\\"\\n      bind:value=\\"{fields.password_confirmation}\\"\\n      id=\\"{id}\\"\\n    />\\n  </Control>\\n  <Control\\n    width=\\"full\\"\\n    let:state\\n    label=\\"How do you intend to use our services?\\"\\n    group=\\"{true}\\"\\n    name=\\"services_option\\"\\n  >\\n    <Group>\\n      <Toggle\\n        type=\\"radio\\"\\n        variant=\\"{state}\\"\\n        name=\\"services_option\\"\\n        value=\\"trading\\"\\n        bind:group=\\"{fields.services_option}\\">Trading</Toggle\\n      >\\n      <Toggle\\n        type=\\"radio\\"\\n        variant=\\"{state}\\"\\n        name=\\"services_option\\"\\n        value=\\"staking\\"\\n        bind:group=\\"{fields.services_option}\\">Staking</Toggle\\n      >\\n      <Toggle\\n        type=\\"radio\\"\\n        variant=\\"{state}\\"\\n        name=\\"services_option\\"\\n        value=\\"hodl\\"\\n        bind:group=\\"{fields.services_option}\\">HODL</Toggle\\n      >\\n      <Toggle\\n        type=\\"radio\\"\\n        variant=\\"{state}\\"\\n        name=\\"services_option\\"\\n        value=\\"other\\"\\n        bind:group=\\"{fields.services_option}\\">Other</Toggle\\n      >\\n    </Group>\\n  </Control>\\n  <Control width=\\"full\\" name=\\"file\\" let:id let:state>\\n    <FileUpload\\n      id=\\"{id}\\"\\n      state=\\"{state}\\"\\n      uploaded=\\"{uploaded}\\"\\n      on:inputFile=\\"{(event) => (fields.file = event.detail.file)}\\"\\n    />\\n  </Control>\\n  <Control width=\\"full\\" let:id let:state name=\\"marketing_email\\">\\n    <Toggle\\n      type=\\"checkbox\\"\\n      variant=\\"{state}\\"\\n      name=\\"marketing_email\\"\\n      id=\\"{id}\\"\\n      bind:value=\\"{fields.marketing_email}\\"\\n    >\\n      I would like to receive marketing emails from Dusk Network and affiliated partners.\\n    </Toggle>\\n  </Control>\\n  <Control width=\\"full\\" let:id let:state name=\\"terms\\">\\n    <Toggle type=\\"checkbox\\" variant=\\"{state}\\" name=\\"terms\\" id=\\"{id}\\" bind:value=\\"{fields.terms}\\">\\n      I agree to the terms and conditions and all that good stuff.\\n    </Toggle>\\n  </Control>\\n  <Control width=\\"full\\">\\n    <Button type=\\"submit\\" size=\\"lg\\">Submit</Button>\\n  </Control>\\n</Form>\\n"},"hero":{"Hero_01":"<script>\\n  import Hero from \\"@dusk-network/hero\\";\\n  import Button from \\"@dusk-network/button\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n\\n  const introduction =\\n    \\"<h1>Heros are very reusable!</h1> <p>The Dusk Grants Program helps projects and developers launch to drive mainstream adoption of blockchain and build the future of finance. Opportunities on Dusk Network are endless.</p>\\";\\n  const description =\\n    \\"<p>Enable any size enterprise to collaborate at scale, meet the highest level of compliance requirements, and ensure that personal and transaction data remains confidential.</p>\\";\\n  const image = '<img src=\\"https://content.dusk.network/uploads/Group_10_1_b752fec2fa.svg\\" />';\\n<\/script>\\n\\n<Hero>\\n  <div slot=\\"introduction\\">\\n    <RichText>\\n      {@html introduction}\\n    </RichText>\\n  </div>\\n  <div slot=\\"cta\\">\\n    <Button href=\\"https://google.com\\">\\n      Apply\\n      <svelte:fragment slot=\\"labelRight\\">Join the Dusk Mission</svelte:fragment>\\n    </Button>\\n    <RichText>\\n      {@html description}\\n    </RichText>\\n  </div>\\n  <div slot=\\"image\\">\\n    <RichText>{@html image}</RichText>\\n  </div>\\n</Hero>\\n"},"navbar":{"Navbar_01":"<script>\\n  import Navbar from \\"@dusk-network/navbar\\";\\n  import DropDown from \\"@dusk-network/drop-down\\";\\n  import Logo from \\"@dusk-network/logo\\";\\n  import Icon from \\"@dusk-network/icon\\";\\n  import Menu, { Item } from \\"@dusk-network/menu\\";\\n<\/script>\\n\\n<Navbar appName=\\"sb-demo\\" id=\\"sb-example-nav\\">\\n  <svelte:fragment slot=\\"logo\\">\\n    <Logo />\\n  </svelte:fragment>\\n  <svelte:fragment slot=\\"networks\\">\\n    <Menu orientation=\\"horizontal\\" name=\\"Network Navigation\\">\\n      <Item>\\n        <DropDown options=\\"{['Testnet', 'Mainnet']}\\" />\\n      </Item>\\n    </Menu>\\n  </svelte:fragment>\\n  <svelte:fragment slot=\\"apps\\">\\n    <Menu orientation=\\"horizontal\\" name=\\"Portal Navigation\\">\\n      <Item href=\\"javascript:;\\" active=\\"{true}\\">Explorer</Item>\\n      <Item href=\\"javascript:;\\">Wallet</Item>\\n      <Item href=\\"javascript:;\\">Staking</Item>\\n    </Menu>\\n  </svelte:fragment>\\n  <svelte:fragment slot=\\"links\\">\\n    <Menu orientation=\\"horizontal\\" name=\\"Developer Links\\">\\n      <Item href=\\"https://shop.dusk.network\\">\\n        <Icon name=\\"tshirt-crew-outline\\" /><span>Shop</span>\\n      </Item>\\n    </Menu>\\n  </svelte:fragment>\\n  <svelte:fragment slot=\\"navigation\\">\\n    <Menu orientation=\\"horizontal\\" name=\\"App Navigation\\">\\n      <Item href=\\"javascript:;\\">Chain Info</Item>\\n      <Item href=\\"javascript:;\\" active>Blocks</Item>\\n      <Item href=\\"javascript:;\\">Transactions</Item>\\n    </Menu>\\n  </svelte:fragment>\\n</Navbar>\\n"},"search-list":{"SearchList_01":"<script>\\n  import SearchList from \\"@dusk-network/search-list\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n  import { useQuery } from \\"@sveltestack/svelte-query\\";\\n  import { tokens } from \\"./data.js\\";\\n\\n  let searchResults;\\n\\n  async function getData() {\\n    return tokens;\\n  }\\n\\n  const apiData = useQuery(\\"content\\", getData);\\n<\/script>\\n\\n{#if $apiData.isLoading}\\n  <p>Loading...</p>\\n{:else if $apiData.isError}\\n  <p>Error: {$apiData.error}</p>\\n{:else}\\n  <SearchList data=\\"{$apiData.data}\\" bind:dataSearchResults=\\"{searchResults}\\">\\n    {#if searchResults}\\n      {#each $searchResults as token}\\n        <div class=\\"duk-search-list__item\\">\\n          <div class=\\"duk-search-list__item--token\\">\\n            <div class=\\"duk-search-list__item--border\\">\\n              {#if token.image}\\n                <img src=\\"{token.image}\\" alt=\\"symbol\\" />\\n              {/if}\\n            </div>\\n            <RichText>\\n              <p>{token.token}</p>\\n            </RichText>\\n          </div>\\n          <RichText>\\n            <p>{token.amount}</p>\\n          </RichText>\\n        </div>\\n      {/each}\\n    {/if}\\n  </SearchList>\\n{/if}\\n","SearchList_02":"<script>\\n  import SearchList from \\"@dusk-network/search-list\\";\\n  import RichText from \\"@dusk-network/rich-text\\";\\n  import { useQuery } from \\"@sveltestack/svelte-query\\";\\n  import { tokens } from \\"./data.js\\";\\n\\n  let searchResults;\\n\\n  async function getData() {\\n    return tokens;\\n  }\\n\\n  const apiData = useQuery(\\"content\\", getData);\\n<\/script>\\n\\n{#if $apiData.isLoading}\\n  <p>Loading...</p>\\n{:else if $apiData.isError}\\n  <p>Error: {$apiData.error}</p>\\n{:else}\\n  <SearchList data=\\"{$apiData.data}\\" bind:dataSearchResults=\\"{searchResults}\\" fieldButton=\\"{true}\\">\\n    {#if searchResults}\\n      {#each $searchResults as token}\\n        <div class=\\"duk-search-list__item\\">\\n          <div class=\\"duk-search-list__item--token\\">\\n            <div class=\\"duk-search-list__item--border\\">\\n              {#if token.image}\\n                <img src=\\"{token.image}\\" alt=\\"symbol\\" />\\n              {/if}\\n            </div>\\n            <RichText>\\n              <p>{token.token}</p>\\n            </RichText>\\n          </div>\\n          <RichText>\\n            <p>{token.amount}</p>\\n          </RichText>\\n        </div>\\n      {/each}\\n    {/if}\\n  </SearchList>\\n{/if}\\n"},"table":{"Table_01":"<script>\\n  import Table, { Row, Datum } from \\"@dusk-network/table\\";\\n  import { useQuery } from \\"@sveltestack/svelte-query\\";\\n  import { apiData } from \\"./data.js\\";\\n\\n  const settings = {\\n    sortable: true,\\n    rowsPerPage: 10,\\n    pagination: true,\\n    limiter: true,\\n  };\\n\\n  let rows;\\n\\n  async function getTransactions() {\\n    return apiData;\\n  }\\n\\n  const transactions = useQuery(\\"content\\", getTransactions);\\n<\/script>\\n\\n{#if $transactions.isLoading}\\n  <p>Loading...</p>\\n{:else if $transactions.isError}\\n  <p>Error: {$transactions.error}</p>\\n{:else}\\n  <Table data=\\"{$transactions.data}\\" bind:dataRows=\\"{rows}\\" settings=\\"{settings}\\">\\n    <h3 slot=\\"title\\">Recent transactions</h3>\\n    <thead slot=\\"head\\">\\n      <Row type=\\"head\\">\\n        <Datum key=\\"id\\" cols=\\"1\\">ID</Datum>\\n        <Datum key=\\"first_name\\" cols=\\"5\\">Status</Datum>\\n        <Datum key=\\"last_name\\" cols=\\"3\\">Time</Datum>\\n        <Datum key=\\"email\\" cols=\\"3\\">Amount</Datum>\\n      </Row>\\n    </thead>\\n    <tbody>\\n      {#if rows}\\n        {#each $rows as row}\\n          <Row>\\n            <Datum cols=\\"1\\">{row.id}</Datum>\\n            <Datum cols=\\"5\\">\\n              {row.status}\\n            </Datum>\\n            <Datum cols=\\"3\\">\\n              {row.timeStamp}\\n            </Datum>\\n            <Datum cols=\\"3\\">\\n              {row.amount}\\n            </Datum>\\n          </Row>\\n        {/each}\\n      {/if}\\n    </tbody>\\n  </Table>\\n{/if}\\n"},"wizard":{"Wizard_01":"<script>\\n  import Wizard, { Step } from \\"@dusk-network/wizard\\";\\n  import Button from \\"@dusk-network/button\\";\\n<\/script>\\n\\n<Wizard stepCount=\\"{2}\\">\\n  <h3 slot=\\"title\\">Wizard title</h3>\\n  <Step number=\\"{1}\\" let:next>\\n    step 1\\n    <Button on:click=\\"{next}\\">Next</Button>\\n  </Step>\\n  <Step number=\\"{2}\\" let:previous>\\n    step 2\\n    <Button on:click=\\"{previous}\\">Back</Button>\\n  </Step>\\n</Wizard>\\n","Wizard_02":"<script>\\n  import Wizard, { Step } from \\"@dusk-network/wizard\\";\\n  import Button from \\"@dusk-network/button\\";\\n<\/script>\\n\\n<Wizard stepCount=\\"{2}\\">\\n  <Step number=\\"{1}\\" let:next>\\n    step 1\\n    <Button on:click=\\"{next}\\">Next</Button>\\n  </Step>\\n  <Step number=\\"{2}\\" let:previous>\\n    step 2\\n    <Button on:click=\\"{previous}\\">Back</Button>\\n  </Step>\\n</Wizard>\\n","Wizard_03":"<script>\\n  import Wizard, { Step } from \\"@dusk-network/wizard\\";\\n  import Button from \\"@dusk-network/button\\";\\n  import ProgressBar from \\"@dusk-network/progress-bar\\";\\n<\/script>\\n\\n<Wizard stepCount=\\"{2}\\">\\n  <div slot=\\"progress-bar\\" let:steps let:step>\\n    <ProgressBar steps=\\"{steps}\\" step=\\"{step}\\" />\\n  </div>\\n  <Step number=\\"{1}\\" let:next>\\n    step 1\\n    <Button on:click=\\"{next}\\">Next</Button>\\n  </Step>\\n  <Step number=\\"{2}\\" let:previous>\\n    step 2\\n    <Button on:click=\\"{previous}\\">Back</Button>\\n  </Step>\\n</Wizard>\\n"}}}`);export{n as S};
